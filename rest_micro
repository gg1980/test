Spring boot Application -> There are lot of defaults set in the project. In the Spring debug logs you have AUTO CONFIGURATION REPORT 
which states are the defaults which are configured as part of the project. So dispatcher servlet and error configuration are automatically
set. There is something called 'Jackson' beans doing conversion from JSON to objects and similar stuff.

HTTP:- GET / POST / DELETE
200 - SUCCESS, 201 - CREATED SUCCESFULLY
400 - BAD REQUEST -> In case of bad input request you can return 400 error and pass the message
500 - Internal server error

IF(HTTP_STATUS == 200)
	SUCCESS THEN DO SOMTHING
ELSE
    CHECK HTTP ERROR and then do something 

@SpringBootApplication
@RestController
@GetMapping
@PathVariable
@PostMapping
@RequestBody
@ResponseStatus(HttpStatus.NOT_FOUND)


spring-cloud-starter-netflix-zuul ---> API Gateway
spring-cloud-starter-netflix-eureka-client  <----> spring-cloud-starter-netflix-eureka-server -> Naming server --> Service Registration and Discovery
spring-cloud-starter-openfeign --> Easy implmenation of Rest Clients
spring-cloud-starter-netflix-ribbon -> Load balances 

spring-cloud-starter-sleuth --> Unique Ids across request
spring-cloud-sleuth-zipkin  --> Distributed tracing services with Zipkin
spring-cloud-starter-bus-amqp --> Queue service
spring-cloud-starter-config <---->spring-cloud-config-server --> Configuration management service wrt to differnt envs usings Git

spring-boot-starter-test
spring-boot-starter-web
spring-boot-starter-actuator
spring-boot-starter-data-jpa
spring-boot-devtools



@SpringBootApplication   <---------------------------------------------- Required to define its spring boot application 
public class CurrencyExchangeServiceApplication {
	public static void main(String[] args) {
		SpringApplication.run(CurrencyExchangeServiceApplication.class, args);
	}
}

@RestController <---------------------------------------------- Tell this is rest controller
public class CurrencyExchangeController
{
	private Logger logger = LoggerFactory.getLogger(this.getClass());
	@Autowired <----------------------------------------------
	private Environment env;
	
	@Autowired <----------------------------------------------
	private ExchangeValueRepository repository;
	
	@GetMapping("/currency-exchange/from/{from}/to/{to}") <----------------------------------------------
	public ExchangeValue retrieveExchangeValue(@PathVariable String from, @PathVariable String to) <-------
	{
		ExchangeValue eV = repository.findByFromAndTo(from, to);
		eV.setPort(Integer.parseInt(env.getProperty("local.server.port")));
		logger.info("{}", eV);
		return eV;
	}
  @PostMapping("/users") <----------------------------------------------
  public void createUser(@RequestBody User user) <----------------------------------------------
  {
     User inputUser = Service.save(user);
  }
  
@PostMapping("/users") <-------------------------------------
public ResponseEntity<Object> createUser(@RequestBody User user) <------ All the data is coming in the User Object
{
     User inputUser = Service.save(user);
     //CREATED
     //user/{id}  savedUser.getId()
     URI location = ServletUriComponentsBuilder.fromCurrentRequest().path("/{id}") <----------- To retrun URI of the created object
				.buildAndExpand(saveUser.getId()).toUri();
     retun ResponseEntity.created(location).build(); <---- URL is requried in HEADER and RESPONSE IS 201
}
  
}

//EXCEPTION HANDING - returning appropriate statuses via HTTP

@ResponseStatus(HttpStatus.NOT_FOUND)
public class UserNotFoundException extends RuntimeException {
	public UserNotFoundException (String message)
	{
		super(message);
	}
}

================================= HATEOAS ===============================================
You create a resouce and then put and links inside it.

================================= Content Neogiation ===============================================

Content Neogiation -> In the header you specify the format that you want the response in for example application/JSON or application/xml
in that scenerio you need modify the response from server. Jackson dataformat xml 

================================= SWAGGER ===============================================
Maven Dependencies -> Sringfox-swagger2 and Sringfox-swagger-ui

@Configuration
@EnableSwagger2
public class SwaggerConfig
{
	@Bean
	public Docket api()
	{
		return new Docket(DocumetationType.SWAGGER_2);
	}
}
================================= MOINTIONING ===============================================
spring-boot-starter-actuator (for monitoing)
spring-data-rest-hal-browser (for viewinig)
you can check health (whether application is up or not), you can check beans (which all beans are loaded),
you can check auditevents, heapdump, threaddump, metrix (like memory, cpu etc), mapping 

================================= Filterning properties ===============================================
Static Bean filter
public class TestBean
{
	@JsonIgnore
	String prop1;
	
	String prop2;
	
}

Dyanmic Bean filter:- Using MappingJacksonValue with filters you can do dynamic filtering
https://www.udemy.com/microservices-with-spring-boot-and-spring-cloud/learn/v4/t/lecture/8005676?start=0

================================= Versioning ===============================================
1. One way to version is to create two differnt URIs for the call
2. params -> Request Params 
@GetMapping(value="/person/param", params="version=2")
public method2(){}
@GetMapping(value="/person/param", params="version=1")
public method1() {}
URL -> http://..../person/param?version=1

3. params -> In the Header
@GetMapping(value="/person/param", headers="X-API-VERSION=2")
public method2(){}
@GetMapping(value="/person/param", params="X-API-VERSION=1")
public method1() {}
URL -> http://..../person/param (NOW PARAMETER NEEDS TO BE SET INTO HEADER)

================================= BASIC SECURITY ===============================================
Maven Dependency -> spring-boot-starter-security ->
Basic Auth - Password is printed in the logs and the client needs to set the security parameters as 
Username - Usernamme
Passowrd - Password
These can be configured in the server in the application.properties
security.user.name = username
security.user.password = password

================================= Basic JPA  ===============================================
spring-boot-starter-data-jpa



=======================Richardson Maturity Model=======================
Level - 0 -> Expose webservices in REST Style
	http://server/getPosts
	http://server/deletePosts
	http://server/doThis
Level - 1 -> Expose resouces with proper URI (improper use of HTTP Methods)
	http://server/accounts
	http://server/accounts/10
Level - 2 -> LEVEL 1 + Proper use of HTTP Methods
	GET - http://server/accounts
	DELETE - http://server/accounts/10
Level - 3 -> LEVEL 2 + HATEOAS (What are next possible sections)

================================Micro-services================================
Small Autonomous services which are created to resolve the business domain problem (often have HTTP as the underlying protocol).
-REST
-Small well chosen Deployable Units
-Cloud Enabled

Benefits:- FMG II
1. Fault Isolation
2. Mixed Technology Stack
3. Grangular Scalability 
4. Independent development
5. Independent deployment

Challanges
1. Complex Archiecture 
2. Debugging problems
3. Fault tolrance should be handled correclty 




	









