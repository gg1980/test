'''
Map requests by
- URI patterns
- Request parametes and parameter conditions
- Request headers
- Media Types

Sample-0 - @GetMapping(path="quoteRequests", params="eventType") -> Only eventType attribute is present
Sample-1 @GetMapping(path="quoteRequests", params="!eventType") -> Negative eventType shouldnt be present
Sample-2 @GetMapping(path="quoteRequests", params="eventType=weddings") -> eventType with weddings value
public String listRequests()
{
   return "quoteRequestList";
}

Method input signatures
- Empty (no args)
- @PathVariable
- @RequestParam
- @ModelAttributes
- 25+ total Spring provided input signatures

//Below object returns Model and View object 
@GetMapping("/quoteRequest/{quoteId}")
public ModelAndView viewQuoteRequest(@PathVariable int quoteId)
{
   QuoteRequest quoteRequestBean = new QuoteRequst();
   quoteRequestBean.setBudget(5000);
   qoteRequestBean.setEventType("wedding");
   
   ModelAndView mav = new ModelAndView();
   mav.addObject("quoteRequestBean",quoteRequestBean);
   mav.setViewName("quoteRequestDetail");
   return mav;
}

//Example of a redirect between controllers
@GetMapping("/quoteRequest/social/{id}")
public String viewRequsetSocial(@PathVariable int id)
{
   String returnViewName ="quoteRequestSocialEventDetail";   
   boolean somecondition = true;
   if(somecondition)
   {
       returnViewName = "redirect:/quoteRequest/wedding/{id}"
   }
   
   return returnViewName;
   
}

//This is API response no GUI back
@GetMapping
@ResponseBody -> Spring will take care of sending JSON object
public QuoteRequest viewQuoteRequestApi()
{
   QuoteRequest quoteRequestBean = new QuoteRequst();
   quoteRequestBean.setBudget(5000);
   qoteRequestBean.setEventType("LWD");
   
  return quoteRequestBean;
}



'''
